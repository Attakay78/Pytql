{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p> PyTQL package, easy to learn, fast to code, rich table formatting </p> <p></p> <p>PyTQL is a simple python <code>table data type</code> with some query operations. If you are working with python and you need a way to visaulize and interact with  your data then Pytql is the package for you.</p>"},{"location":"#the-key-features-are","title":"The key features are","text":"<ul> <li><code>Data type support</code> - Has a <code>model based</code> structure for defining tables and <code>Fields</code>  for table columns that define the field's types.</li> <li><code>Rich Format</code> - Has a rich formatting feature to design and beautify the table the way you want.</li> <li><code>Easy</code> - Designed to be easy to use and learn with less time reading docs.</li> <li><code>Client Interpreter</code> - Has an option to use the feature of PyTQL on a cli interpreter  (Supports other python commands).</li> <li><code>Import files</code> - Has support to import your data files to work with. Files type supported; csv and json.</li> <li><code>Export data</code> - Has support to export your table data into csv, json and html files.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install PyTQL with pip3</p> <pre><code>  pip install pytql==[version]\n  current version = 0.0.3\n</code></pre>"},{"location":"#usageexamples","title":"Usage/Examples","text":""},{"location":"#working-with-python-iterable-data-types-list-tuple-dict","title":"Working with Python iterable data types (List, Tuple, Dict)","text":"<ul> <li>Import the necessary packages from pytql</li> </ul> <pre><code>from pytql.model import Model\nfrom pytql.fields import CharField, IntField\nfrom pytql.colors import Color\nfrom pytql.table import Table\nfrom pytql.repl import start_client, ReplType\n\n\nclass Student(Model):\n    first_name = CharField(name=\"First Name\", max_length=20)\n    last_name = CharField()\n    age = IntField()\n    length = IntField()\n</code></pre> Tip <ul> <li>Table class is the class for creating the table instance. </li> <li>Model  class is the base class for creating your Table Model.</li> <li><code>CharField</code> and <code>IntField</code> classes are the table fields to be used.</li> <li><code>start_client</code> function is the function to start the cli interpreter.</li> <li><code>ReplType</code> class is the enum class containing all the cli interpreter types.</li> </ul> <ul> <li>Create the table Model The <code>Student</code> class is out Table Model to be used which is inherited from the base <code>Model</code> class. The <code>CharField</code> is a character field with some specified field values used to specify the type of the field NB: By default the field name is infered from the Field instance name like <code>firstname</code>, but you can  override the field name by passing a value to the <code>name</code> argument passed to the <code>Field</code></li> </ul> <p><pre><code>from pytql.model import Model\nfrom pytql.fields import CharField, IntField\nfrom pytql.colors import Color\nfrom pytql.table import Table\nfrom pytql.repl import start_client, ReplType\n\n\nclass Student(Model):\n    first_name = CharField(name=\"First Name\", max_length=20)\n    last_name = CharField()\n    age = IntField()\n    length = IntField()\n</code></pre> </p> <ul> <li>Get data to populate the Student table The data can come in any python iterable type form.Currently not supporting Set type</li> </ul> <pre><code>from pytql.model import Model\nfrom pytql.fields import CharField, IntField\nfrom pytql.colors import Color\nfrom pytql.table import Table\nfrom pytql.repl import start_client, ReplType\n\n\nclass Student(Model):\n    first_name = CharField(name=\"First Name\", max_length=20)\n    last_name = CharField()\n    age = IntField()\n    length = IntField()\n\n# Data to populate Student table.\nstudent_data = [\n    [\"Richard\", \"Quaicoe\", 23, 243],\n    [\"Mike\", \"Kuam\", 33, 123],\n    [\"Roynam\", \"Skim\", 13, 56],\n    [\"Leon\", \"Santa\", 29, 23],\n    [\"Geroge\"],\n]\n</code></pre> <p></p> <ul> <li>Create your Table instance with the <code>Table</code> class</li> </ul> <pre><code>from pytql.model import Model\nfrom pytql.fields import CharField, IntField\nfrom pytql.colors import Color\nfrom pytql.table import Table\nfrom pytql.repl import start_client, ReplType\n\n\nclass Student(Model):\n    first_name = CharField(name=\"First Name\", max_length=20)\n    last_name = CharField()\n    age = IntField()\n    length = IntField()\n\n# Data to populate Student table.\nstudent_data = [\n    [\"Richard\", \"Quaicoe\", 23, 243],\n    [\"Mike\", \"Kuam\", 33, 123],\n    [\"Roynam\", \"Skim\", 13, 56],\n    [\"Leon\", \"Santa\", 29, 23],\n    [\"Geroge\"],\n]\n\n# Example with passing data with `Student` Model.\nstudent_table = Table(\n    model=Student,\n    data=student_data,\n    header_color=Color.cyan,\n    row_color=Color.green,\n    table_color=Color.red,\n)\n</code></pre> Tip <p>The Table class has several arguments needed to create the table,  below are some of the arguments used to create the table above.</p> <ul> <li><code>model</code> - the model to use to specify the table fields. </li> <li><code>data</code> - data to populate the table.</li> <li><code>header_color</code> - color to design the table header.</li> <li><code>row_color</code> - color to design the table rows.</li> <li><code>table_color</code> - color to design the actual table.</li> </ul> <p>Check the api docs for other Table arguments.</p> <p></p> <ul> <li>Draw the student table</li> </ul> <pre><code>from pytql.model import Model\nfrom pytql.fields import CharField, IntField\nfrom pytql.colors import Color\nfrom pytql.table import Table\nfrom pytql.repl import start_client, ReplType\n\n\nclass Student(Model):\n    first_name = CharField(name=\"First Name\", max_length=20)\n    last_name = CharField()\n    age = IntField()\n    length = IntField()\n\n# Data to populate Student table.\nstudent_data = [\n    [\"Richard\", \"Quaicoe\", 23, 243],\n    [\"Mike\", \"Kuam\", 33, 123],\n    [\"Roynam\", \"Skim\", 13, 56],\n    [\"Leon\", \"Santa\", 29, 23],\n    [\"Geroge\"],\n]\n\n# Example with passing data with `Student` Model.\nstudent_table = Table(\n    model=Student,\n    data=student_data,\n    header_color=Color.cyan,\n    row_color=Color.green,\n    table_color=Color.red,\n)\n\nstudent_table.draw_table()\n</code></pre> <p> The Table drawn should generate the below table image </p> <p></p> <ul> <li>Time to perform some queries We will just show a few of the queries possible, check the api docs for  more query functionalities</li> </ul> Add new row to student table at position 3<pre><code>...\n\nstudent_table.add_row([\"Jon\", \"Doe\", 23, 232], position=3)\nstudent_table.draw_table()\n</code></pre> <p> Table generated after adding new row to Student table at position 3 </p> <p></p> Query student table by filtering with First Name and length columns<pre><code>...\n\nquery_data = (\n    student_table.query()\n    .filter_by(\"First Name\")\n    .equals(\"Richard\")\n    .filter_by(\"length\")\n    .greater_than(\"20\")\n    .end_query()\n)\n\nstudent_table.draw_table(query_data)\n</code></pre> <p> Table generated after filtering Student table with some columns </p> <p></p> Update student age column<pre><code>...\n\nstudent_table.update(\"age\").where(\"33\", \"67\")\nstudent_table.draw_table()\n</code></pre> <p> Table generated after updating student age column </p> <p></p>"},{"location":"#working-with-data-from-a-filejson-or-csv","title":"Working with data from a file(json or csv)","text":"<p>Note</p> <p>The approach is same as passing a python iterable data type except in the case the data passed to the <code>Table</code> class is a <code>file name</code>. Check highlighted section below.</p> <pre><code>from pytql.model import Model\nfrom pytql.fields import CharField, IntField\nfrom pytql.colors import Color\nfrom pytql.table import Table\nfrom pytql.repl import start_client, ReplType\n\n\nclass Employee(Model):\n    first_name = CharField(name=\"First Name\", max_length=40)\n    last_name = CharField(name=\"Last Name\")\n    password = CharField()\n    city = CharField()\n\n\n# Example with passing file data with `Employee` Model.\nemployee_table = Table(\n    model=Employee,\n    file=\"user_data.json\",\n    header_color=Color.cyan,\n    row_color=Color.green,\n    table_color=Color.blue,\n)\n\nemployee_table.draw_table()\n</code></pre>"},{"location":"#running-your-application-on-a-pytql-cli-interpreter","title":"Running your application on a PyTQL cli interpreter","text":"<p>If you want to run your application on a PyTQL cli interpreter instead of a code editor, import the start_client<code>function from</code>pytql.repl` and specify your repl  type. Check api docs for more information about different repl types. </p> <p>NB: Pass <code>__name__</code> as the first argument to the <code>start_client</code> function.</p> <pre><code>start_client(__name__, repl_type=ReplType.ipython_repl)\n</code></pre> <p>You should see below output after executing the <code>start_client</code> function.</p> <pre><code>Welcome to Pytql REPL! We hope you enjoy your stay!\nPython 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0]\nType 'copyright', 'credits' or 'license' for more information\nIPython 8.15.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:\n</code></pre> <p></p>"},{"location":"#recap","title":"Recap","text":"<p>In summary, you first create the table model with preferred fields. Then you create the data to populate to the table or file containing the data. Create the table instance with your parameter options. The table is then available to view, update, query and delete.</p>"},{"location":"colors/","title":"Colors","text":"<p>This part of the documentation covers all possible colors supported for table beautification.</p> <p>  class  pytql.colors.Color </p> <p></p> <p>Supported colors:</p> <ul> <li>black</li> <li>blue</li> <li>cyan</li> <li>green</li> <li>orange</li> <li>pink</li> <li>purple</li> <li>red</li> <li>yellow</li> <li>dark_grey</li> <li>light_blue</li> <li>light_cyan</li> <li>light_green</li> <li>light_grey</li> <li>light_red</li> </ul>"},{"location":"colors/#example","title":"Example","text":"<pre><code>from pytql.model import Model\nfrom pytql.fields import CharField, IntField\nfrom pytql.colors import Color\nfrom pytql.table import Table\nfrom pytql.repl import start_client, ReplType\n\n\nclass Student(Model):\n    first_name = CharField(name=\"First Name\", max_length=20)\n    last_name = CharField()\n    age = IntField()\n    length = IntField()\n\n# Data to populate Student table.\nstudent_data = [\n    [\"Richard\", \"Quaicoe\", 23, 243],\n    [\"Mike\", \"Kuam\", 33, 123],\n    [\"Roynam\", \"Skim\", 13, 56],\n    [\"Leon\", \"Santa\", 29, 23],\n    [\"Geroge\"],\n]\n\n# Example with passing data with `Student` Model.\nstudent_table = Table(\n    model=Student,\n    data=student_data,\n    header_color=Color.cyan,\n    row_color=Color.green,\n    table_color=Color.red,\n)\n</code></pre> <p> The colors provided should generate the below table image </p>"},{"location":"data/","title":"Table Data","text":"<p>This part of the documentation covers methods that can be called on the table data instance.</p>"},{"location":"data/#data","title":"Data","text":"<p>  class  pytql.data.Data (data=None, headers=None) </p> <p></p>"},{"location":"data/#methods","title":"Methods","text":"<p>end_query( )</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Ends table query session  Returns: List</p> <p></p> <p>filter_by(column)</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Filters table according to column name passed.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 column (str): Column to be filtered.  Returns:  Data | None</p> <p></p> <p>equals(value)</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Filters the table data by value equal to <code>value</code> provided.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 value (str): value to be filter by.  Returns:  Data | None</p> <p></p> <p>greater_than(value)</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Filters the table data by value greater than provided.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 value (str): value to be filter by.  Returns:  Data | None</p> <p></p> <p>less_than(value)</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Filters the table data by value less than provided.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 value (str): value to be filter by.  Returns:  Data | None</p> <p></p>"},{"location":"exceptions/","title":"Exceptions","text":"<p>The following are possible exceptions to expect.</p>"},{"location":"exceptions/#columndoesnotexist","title":"ColumnDoesNotExist","text":"<p>  exception  pytql.exceptions.ColumnDoesNotExist </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: <code>Exception</code></p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Exception class to raise if column does not exist.</p> <p></p>"},{"location":"exceptions/#fieldcantbenull","title":"FieldCantBeNull","text":"<p>  exception  pytql.exceptions.FieldCantBeNull </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: <code>Exception</code></p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Exception class to raise if field expected not to be null is null.</p> <p></p>"},{"location":"exceptions/#fieldtypeerror","title":"FieldTypeError","text":"<p>  exception  pytql.exceptions.FieldTypeError </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: <code>Exception</code></p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Exception class to raise if field type is not supported.</p> <p></p>"},{"location":"exceptions/#maxlengthexceeded","title":"MaxLengthExceeded","text":"<p>  exception  pytql.exceptions.MaxLengthExceeded </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: <code>Exception</code></p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Exception class to raise if max length is exceeded.</p> <p></p>"},{"location":"exceptions/#unsupporteddatatype","title":"UnsupportedDataType","text":"<p>  exception  pytql.exceptions.UnsupportedDataType </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: <code>Exception</code></p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Exception class to raise if data type provided is not supported.</p> <p></p>"},{"location":"fields/","title":"Model Fields","text":"<p>This part of the documentation covers all field classes for defining the Table column types.</p>"},{"location":"fields/#field","title":"Field","text":"<p>  class  pytql.fields.Field (name: str | None = None, nullable: bool = True, unique: bool = False, editable: bool = True, serialize: bool = True) </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Base class from which other Field classes inherit from.</p> <p>Parameters:  </p> <ul> <li>name (str | None) - Name of the column field.</li> <li>nullable (bool) - Option to determine whether the column can be null.</li> <li>unique (bool) - Option to determine whether the column should be unique.</li> <li>editable (bool) - Option to determine whether the column should be editable.</li> <li>serialize (bool) - Option to determine whether the column should be serialized.</li> </ul> <p></p>"},{"location":"fields/#booleanfield","title":"BooleanField","text":"<p>  class  pytql.fields.BooleanField (name: str | None = None, nullable: bool = True, unique: bool = False, editable: bool = True, serialize: bool = True) </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: Field</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Class for setting boolean field values for models.</p> <p>Parameters: <code>BooleanField</code> inherits all its parameters from base class Field .</p> <p></p>"},{"location":"fields/#floatfield","title":"FloatField","text":"<p>  class  pytql.fields.FloatField (name: str | None = None, nullable: bool = True, unique: bool = False, editable: bool = True, serialize: bool = True) </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: Field</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Class for setting float field values for models.</p> <p>Parameters: <code>FloatField</code> inherits all its parameters from base class Field .</p> <p></p>"},{"location":"fields/#intfield","title":"IntField","text":"<p>  class  pytql.fields.IntField (name: str | None = None, nullable: bool = True, unique: bool = False, editable: bool = True, serialize: bool = True) </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: Field</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Class for setting integer field values for models.</p> <p>Parameters: <code>IntField</code> inherits all its parameters from base class Field .</p> <p></p>"},{"location":"fields/#charfield","title":"CharField","text":"<p>  class  pytql.fields.CharField (max_length: int = 225, name: str | None = None, nullable: bool = True, unique: bool = False, editable: bool = True,  serialize: bool = True, choices: Any | None = None) </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: Field</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Class for setting chracter field values for models. Accepts a max size of 255  characters.</p> <p>Parameters:  </p> <ul> <li>max_length (int) - Maximum length of field value. </li> <li>choices (Any | None) - List of choices field values can be selected</li> </ul> <p></p>"},{"location":"fields/#textfield","title":"TextField","text":"<p>  class  pytql.fields.TextField (max_length: int = 225, name: str | None = None, nullable: bool = True, unique: bool = False, editable: bool = True,  serialize: bool = True, choices: Any | None = None) </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: CharField</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Class for setting chracter field values for models. Accepts a max size of 1024 characters.</p> <p>Parameters:  </p> <ul> <li>max_length (int) - Maximum length of field value. </li> <li>choices (Any | None) - List of choices field values can be selected</li> </ul> <p></p>"},{"location":"model/","title":"Base Model","text":"<p>The base model for creating all Table Models. Inherite the base model to create a new Table Model.</p> <p> class pytql.model.Model </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bases: <code>object</code></p>"},{"location":"model/#example","title":"Example","text":"<pre><code>class Student(Model):\n    first_name = CharField(name=\"First Name\", max_length=20)\n    last_name = CharField()\n    age = IntField()\n    length = IntField()\n</code></pre>"},{"location":"repl/","title":"Cli Client","text":""},{"location":"repl/#repltype","title":"ReplType","text":"<p>  class  pytql.repl.ReplType </p> <p></p> <p>Class listing of cli repl types.</p> <p>default_repl</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Default repl to run Pytql client. Non-interactive.</p> <p></p> <p>interactive_repl</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Interactive repl to run PyTQL client. Interactive but no autocomplete.</p> <p></p> <p>ipython_repl</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Interactive repl to run Pytql client. Supports autocomplete and autosuggestions.</p> <p></p> <p> Image of code sample and it's output run from the ipython_repl cli client. </p> <p></p> <p>  function  pytql.repl.start_client (module_name, repl_type: ~pytql.repl.ReplType = ) <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Function to start the Pytql client repl.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 module_name : Name of the module PyTQL is being run from. Always pass  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<code>__name__</code> as the value. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 repl_type : Repl type to use. Defaults to ReplType.default_repl.</p> <p></p>"},{"location":"table/","title":"PyTQL Table","text":"<p>This section contains information about how to create a PyTQL table and beautify it.</p>"},{"location":"table/#class","title":"Class","text":"<p>  class  pytql.table.Table (model: Model, data=None, file=None, header_color, row_color, table_color) </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Class used to create Table data type.</p> <p>Parameters:  </p> <ul> <li>model (Model) - Model to be used to validate table data.</li> <li>data (Any) - Data to be populated in table. Defaults to <code>None</code>.</li> <li>file (str) - File conatining data to be populated. Defaults to <code>None</code>.</li> <li>header_color (Color) - Table header color. Defaults to <code>Color.default</code>.</li> <li>row_color (Color) - Table row color. Defaults to <code>Color.default</code>.</li> <li>table_color (Color) - Table style color. Defaults to <code>Color.default</code>.</li> </ul> <p></p>"},{"location":"table/#methods","title":"Methods","text":"<p>add_row(row, position=None)</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Adds additional row data to the table at a specified position.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 row (List) : Row data to be added to table. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 position (int) : Position of the row data to be added.</p> <p></p> <p>draw_table(data=None)</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Method to draw table with data provided.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data (List) : Table data to draw.</p> Tip <p>Don't pass any data when you want to draw the table.  Only pass data returned from performing queries or any List of data when you want to visualize the data.</p> <p></p> <p>get_data( )</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Returns current state of table data. </p> <p>query( )</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Opens up the table for querying/filtering. </p> <p>update(column)</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Specifies the table column to update.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 column (str) : Column to be updated.  </p> <p></p> <p>where(value, updated_value)</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Specifies which table data to alter.  Args:  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 value (str) : Current value in table. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 updated_value (str) : New value to replace old table value.</p> <p></p>"}]}